{"version":3,"sources":["api/api.js","api/users.js","components/UserSelect/UserSelect.jsx","api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostComments/PostComments.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","result","data","getUsers","users","UserSelect","selectedUserId","selectUser","useState","setUsers","useEffect","loadUsers","loadedUser","slice","className","value","onChange","map","user","index","key","id","name","getUserPosts","userId","method","posts","filter","post","getPostDetails","postId","details","Loader","PostsList","selectedPostId","selectPost","setPosts","isLoading","setIsLoading","loadPosts","loadedPosts","title","type","onClick","getPostComments","comments","postComments","comment","addComment","email","body","headers","JSON","stringify","removeComment","commentId","NewCommentForm","updateComments","setName","setEmail","setBody","error","setError","handleSubmit","event","preventDefault","includes","handleChange","target","onSubmit","placeholder","PostComments","handleClick","PostDetails","setDetails","setComments","isVisible","setIsVisible","loadDetails","postDetails","length","App","setSelectedUserId","setSelectedPostId","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da0aaf06.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport async function request(url, options) {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return result.data;\n}\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, { method: 'DELETE' });\n","import { request } from './api';\n\nexport const getUsers = async() => {\n  const users = await request('/users');\n\n  return users;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getUsers } from '../../api/users';\n\nexport const UserSelect = ({ selectedUserId, selectUser }) => {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadUsers = async() => {\n    const loadedUser = await getUsers();\n\n    setUsers(loadedUser.slice(0, 10));\n  };\n\n  return (\n    <label>\n      Select a user: &nbsp;\n\n      <select\n        className=\"App__user-selector\"\n        value={selectedUserId}\n        onChange={selectUser}\n      >\n        <option value=\"0\">All users</option>\n        {users.map((user, index) => (\n          <option\n            key={user.id}\n            value={index + 1}\n          >\n            {user.name}\n          </option>\n        ))}\n      </select>\n    </label>\n  );\n};\n\nUserSelect.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts', { method: 'GET' });\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const details = await request(`/posts/${postId}`);\n\n  return details;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUserId, selectedPostId, selectPost }) => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  const loadPosts = async() => {\n    const loadedPosts = await getUserPosts(selectedUserId);\n\n    setPosts(loadedPosts);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul>\n          {posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>{`[User #${post.userId}]:`}</b>\n                {post.title}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => selectPost(post.id)}\n              >\n                {selectedPostId === post.id ? 'Close' : 'Open'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n};\n","import { request, post, remove } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n  const postComments = comments.filter(comment => comment.postId === postId);\n\n  return postComments;\n};\n\nexport const addComment = async(postId, name, email, body) => post(\n  '/comments', {\n    postId,\n    name,\n    email,\n    body,\n  },\n);\n\nexport const removeComment = commentId => remove(`/comments/${commentId}`);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n\n    if (!name || !body || !email) {\n      setError('Fill all fields, please');\n\n      return;\n    }\n\n    if (!email.includes('@')) {\n      setError('Something wrong with entered email');\n\n      return;\n    }\n\n    await addComment(postId, name, email, body);\n    updateComments();\n\n    setBody('');\n    setError('');\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setError('');\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default: setError('');\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      {error && <p className=\"NewCommentForm__error\">{error}</p>}\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { removeComment } from '../../api/comments';\n\nexport const PostComments = ({ comments, updateComments }) => {\n  const handleClick = async(commentId) => {\n    await removeComment(commentId);\n    updateComments();\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li\n          key={comment.id}\n          className=\"PostDetails__list-item\"\n        >\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => handleClick(comment.id)}\n          >\n            X\n          </button>\n\n          <p>\n            {comment.body}\n          </p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nPostComments.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { PostComments } from '../PostComments/PostComments';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [details, setDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    loadDetails();\n    updateComments();\n  }, [selectedPostId]);\n\n  const loadDetails = async() => {\n    const postDetails = await getPostDetails(selectedPostId);\n\n    setDetails(postDetails);\n    setIsVisible(false);\n  };\n\n  const updateComments = async() => {\n    const postComments = await getPostComments(selectedPostId);\n\n    setComments(postComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{details.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setIsVisible(!isVisible)}\n          >\n            {isVisible ? 'Hide comments' : 'Show comments'}\n          </button>\n        ) : (\n          <h3>No Comments</h3>\n        )}\n\n        {isVisible\n          && (\n            <PostComments\n              comments={comments}\n              updateComments={updateComments}\n            />\n          )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            updateComments={updateComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState, useCallback } from 'react';\n\nimport { UserSelect } from './components/UserSelect';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUser = useCallback((event) => {\n    setSelectedUserId(+event.target.value);\n  }, []);\n\n  const selectPost = (postId) => {\n    if (postId === selectedPostId) {\n      setSelectedPostId(0);\n\n      return;\n    }\n\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          selectUser={selectUser}\n          selectedUserId={selectedUserId}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectPost={selectPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n          ) : (\n            <h4>Open a post to see details</h4>\n          )}\n\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}