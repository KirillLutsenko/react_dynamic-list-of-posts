{"version":3,"sources":["api/api.js","Shapes.jsx","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","components/PostDetails/PostDetails.jsx","api/posts.js","App.jsx","index.js"],"names":["BASE_URL","request","url","fetch","then","response","json","result","data","PostType","PropTypes","shape","id","number","isRequired","title","string","userId","PostsList","arrayOf","func","posts","onPostSelected","selectedPostId","className","map","post","key","type","classnames","onClick","NewCommentForm","addComment","useState","name","setName","email","setEmail","body","setBody","error","setError","onSubmit","event","preventDefault","trim","placeholder","value","onChange","target","getsComments","postId","addNewComment","method","JSON","stringify","PostDetails","setPost","comments","setComments","visibility","setVisibility","useEffect","getPost","length","comment","commentId","App","setPosts","users","setUsers","setSelectedPostId","selectedUser","setSelectedUser","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89d7735f.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const post = (url, data) => fetch(`${BASE_URL}${url}`, {\n  method: 'POST',\n  body: JSON.stringify(data),\n})\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const getUsers = () => request('/users');\n","import PropTypes from 'prop-types';\n\nexport const PostType = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  userId: PropTypes.number.isRequired,\n}).isRequired;\n\nexport const PostListType = {\n  posts: PropTypes.arrayOf(PostType),\n  onPostSelected: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './PostsList.scss';\nimport classnames from 'classnames';\nimport { PostListType } from '../../Shapes';\n\nexport const PostsList = ({ posts, onPostSelected, selectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          className=\"PostsList__item\"\n          key={post.id}\n        >\n          <div>\n            <b>\n              {`[User #${post.userId}]: `}\n            </b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className={classnames(\n              'PostsList__button',\n              'button',\n              { 'PostsList__button--selected': selectedPostId === post.id },\n            )}\n            onClick={() => onPostSelected(post.id)}\n          >\n            {selectedPostId === post.id ? (\n              'Close'\n            ) : ('Open')\n            }\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = PostListType;\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [error, setError] = useState(false);\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setError(false);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        if (name.trim() && email.trim() && body.trim()) {\n          addComment(name, email, body);\n          resetForm();\n        } else {\n          setError(true);\n        }\n      }}\n    >\n      {error && (\n        <p className=\"NewCommentForm__error\">\n          Fill all fields to add a comment!\n        </p>\n      )}\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n};\n","import { request, post, BASE_URL } from './api';\n\nexport const getsComments = postId => request(`/comments?postId=${postId}`);\n\nexport const addNewComment = (postId, name, email, body) => post(\n  '/comments', {\n    postId,\n    name,\n    email,\n    body,\n  },\n);\n\nexport const deleteComment = commentId => fetch(\n  `${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  },\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { addNewComment, deleteComment, getsComments } from '../../api/comments';\nimport { getPost } from '../../api/posts';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [visibility, setVisibility] = useState(false);\n\n  useEffect(() => {\n    getPost(postId).then(setPost);\n    getsComments(postId).then(setComments);\n  }, [postId]);\n\n  const addComment = (name, email, body) => {\n    addNewComment(postId, name, email, body)\n      .then(() => getsComments(postId))\n      .then(setComments);\n  };\n\n  if (!post) {\n    return <p>Select the post</p>;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0 ? (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setVisibility(!visibility)}\n          >\n            {visibility ? (\n              `Hide comments`\n            ) : (\n              `Show ${comments.length} comments`\n            )}\n          </button>\n        ) : (\n          <p>This post has no comments</p>\n        )}\n        {visibility && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.body}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    deleteComment(comment.id)\n                      .then(() => getsComments(postId))\n                      .then(setComments);\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={postId} addComment={addComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getPosts = () => request('/posts');\n\nexport const getPost = postId => request(`/posts/${postId}`);\n\nexport const getPostsByUser = userId => request(`/posts?userId=${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getUsers } from './api/api';\nimport { getPosts, getPostsByUser } from './api/posts';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUser, setSelectedUser] = useState(0);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser === 0) {\n      getPosts().then(setPosts);\n\n      return;\n    }\n\n    getPostsByUser(selectedUser).then(setPosts);\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUser(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            onPostSelected={(postId) => {\n              if (postId === selectedPostId) {\n                setSelectedPostId(0);\n              } else {\n                setSelectedPostId(postId);\n              }\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails postId={selectedPostId} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}