{"version":3,"sources":["components/ButtonOpenClose/ButtonOpenClose.jsx","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/ButtonShowHide/ButtonShowHide.jsx","components/Comment/Comment.jsx","components/CommentsList/CommentsList.jsx","components/CommentsDetails/CommentsDetails.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["ButtonOpenClose","changePostId","postId","useState","isClicked","setIsClicked","type","className","onClick","Loader","PostsList","posts","length","map","post","key","id","userId","title","NewCommentForm","add","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUserPosts","a","method","filter","getPostDetails","getPostComments","comments","comment","addComment","newComment","headers","JSON","stringify","removeComment","commentId","ButtonShowHide","commentsLength","isShowedCommentsOnClick","Comment","remove","CommentsList","CommentsDetails","isShowedComments","setIsShowedComments","bool","PostDetails","setComments","setPost","removedCommentId","filteredComments","useEffect","getDetails","postFromServer","getComments","commentsFromServer","App","setPosts","setUserId","selectedPostId","setSelectedPostId","userPostsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e1c0129.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ButtonOpenClose = ({ changePostId, postId }) => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  const handleClickClose = () => {\n    changePostId(0);\n    setIsClicked(false);\n  };\n\n  const handleClickOpen = () => {\n    changePostId(postId);\n    setIsClicked(true);\n  };\n\n  return (\n    <>\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"PostsList_button button\"\n          onClick={handleClickClose}\n        >\n          Close\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"PostsList_button button\"\n          onClick={handleClickOpen}\n        >\n          Open\n        </button>\n      )}\n    </>\n  );\n};\n\nButtonOpenClose.propTypes = {\n  changePostId: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { ButtonOpenClose } from '../ButtonOpenClose';\nimport { Loader } from '../Loader';\n\nexport const PostsList = ({ posts, changePostId }) => (\n  <>\n    {!posts.length ? (\n      <Loader />\n    ) : (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>{`User #${post.userId}`}</b>\n                <br />\n                {post.title}\n              </div>\n              <ButtonOpenClose\n                changePostId={changePostId}\n                postId={post.id}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    )}\n  </>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  changePostId: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, add }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const setValueName = (event) => {\n    const { value } = event.target;\n\n    setName(value);\n  };\n\n  const setValueEmail = (event) => {\n    const { value } = event.target;\n\n    setEmail(value);\n  };\n\n  const setValueBody = (event) => {\n    const { value } = event.target;\n\n    setBody(value);\n  };\n\n  const handleSubmitNewComment = (event) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    add(newComment);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmitNewComment}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={setValueName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={setValueEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={setValueBody}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  add: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, {\n  method: 'DELETE',\n});\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts', { method: 'GET' });\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await request(`/posts/${postId}`, { method: 'GET' });\n\n  if (!postId) {\n    return null;\n  }\n\n  return post;\n};\n","import { request, post, remove } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  if (!postId) {\n    return [];\n  }\n\n  return comments.filter(comment => comment.postId === postId);\n};\n\nexport const addComment = async newComment => post('/comments', {\n  ...newComment,\n});\n\nexport const removeComment = async commentId => remove(\n  `/comments/${commentId}`,\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ButtonShowHide = ({ commentsLength, isShowedCommentsOnClick }) => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  const handleClickHide = () => {\n    setIsClicked(false);\n    isShowedCommentsOnClick(false);\n  };\n\n  const handleClickShow = () => {\n    setIsClicked(true);\n    isShowedCommentsOnClick(true);\n  };\n\n  return (\n    <>\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleClickHide}\n        >\n          {`Show ${commentsLength} comments`}\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleClickShow}\n        >\n          {`Hide ${commentsLength} comments`}\n        </button>\n      )}\n    </>\n  );\n};\n\nButtonShowHide.propTypes = {\n  commentsLength: PropTypes.number.isRequired,\n  isShowedCommentsOnClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comment = ({\n  comment,\n  remove,\n}) => (\n  <li className=\"PostDetails__list-item\">\n    <button\n      type=\"button\"\n      className=\"PostDetails__remove-button button\"\n      onClick={() => remove(comment.id)}\n    >\n      X\n    </button>\n    <p>{comment.body}</p>\n  </li>\n);\n\nComment.propTypes = {\n  remove: PropTypes.func.isRequired,\n  comment: PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Comment } from '../Comment';\n\nexport const CommentsList = ({ remove, comments }) => (\n  <ul className=\"PostDetails__list\">\n    {comments.map(comment => (\n      <Comment\n        key={comment.id}\n        comment={comment}\n        remove={remove}\n      />\n    ))}\n  </ul>\n);\n\nCommentsList.propTypes = {\n  remove: PropTypes.func.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonShowHide } from '../ButtonShowHide';\nimport { CommentsList } from '../CommentsList';\n\nexport const CommentsDetails = ({ commentsLength, comments, remove }) => {\n  const [isShowedComments, setIsShowedComments] = useState(false);\n\n  const isShowedCommentsOnClick = (bool) => {\n    setIsShowedComments(bool);\n  };\n\n  return (\n    <section className=\"PostDetails__comments\">\n      <ButtonShowHide\n        commentsLength={commentsLength}\n        isShowedCommentsOnClick={isShowedCommentsOnClick}\n      />\n\n      {isShowedComments && (\n        <CommentsList\n          comments={comments}\n          remove={remove}\n        />\n      )}\n    </section>\n  );\n};\n\nCommentsDetails.propTypes = {\n  commentsLength: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  remove: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, addComment, removeComment } from '../../api/comments';\nimport { CommentsDetails } from '../CommentsDetails';\n\nexport const PostDetails = ({ postId }) => {\n  const [comments, setComments] = useState([]);\n  const [post, setPost] = useState(null);\n\n  const add = async(newComment) => {\n    await addComment(newComment);\n\n    setComments([...comments, newComment]);\n  };\n\n  const remove = async(removedCommentId) => {\n    await removeComment(removedCommentId);\n    const filteredComments = comments.filter(\n      comment => removedCommentId !== comment.id,\n    );\n\n    setComments(filteredComments);\n  };\n\n  useEffect(() => {\n    const getDetails = async() => {\n      const postFromServer = await getPostDetails(postId);\n\n      setPost(postFromServer);\n    };\n\n    const getComments = async() => {\n      const commentsFromServer = await getPostComments(postId);\n\n      setComments(commentsFromServer);\n    };\n\n    getDetails();\n    getComments();\n  }, [postId]);\n\n  return (\n    <>\n      {!post ? (\n        <Loader />\n      ) : (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n\n          {!!comments.length && (\n            <CommentsDetails\n              commentsLength={comments.length}\n              comments={comments}\n              remove={remove}\n            />\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                add={add}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const changePostId = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  const handleChangeUserId = (event) => {\n    const { value } = event.target;\n\n    setUserId(+value);\n  };\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then((userPostsFromServer) => {\n        setPosts(userPostsFromServer);\n      });\n  }, [userId, posts]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={handleChangeUserId}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            changePostId={changePostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails\n              postId={selectedPostId}\n            />\n          ) : (<div>Please, choose an item</div>)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}